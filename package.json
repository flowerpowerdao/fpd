{
  "name": "fpd",
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "serve": "HOST=0.0.0.0 vite preview --host",
    "seed": "./seed.zsh",
    "deploy": ". ./set-deploy-env.zsh && dfx stop && rm -rf .dfx btcflower-nft/btcflower-nft/.dfx ethflower-nft-canister/.dfx icpflower-nft-canister/.dfx && dfx start --clean --background && npm run deploy:btcflower && npm run deploy:ethflower && npm run deploy:icpflower",
    "deploy:btcflower": "cd btcflower-nft/btcflower-nft && dfx deploy --argument '(principal '$NFT_CANISTER_OWNER_PRINCIPAL')' staging && dfx canister call staging addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call staging initMint '(vec {'$NFT_MINT_ADDRESSES'})' && cd ../..",
    "deploy:ethflower": "cd ethflower-nft-canister && dfx deploy --argument '(principal '$NFT_CANISTER_OWNER_PRINCIPAL')' staging && dfx canister call staging addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call staging initMint '(vec {'$NFT_MINT_ADDRESSES'})' && cd ..",
    "deploy:icpflower": "cd icpflower-nft-canister && dfx deploy --argument '(principal '$NFT_CANISTER_OWNER_PRINCIPAL')' staging && dfx canister call staging addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call staging initMint '(vec {'$NFT_MINT_ADDRESSES'})' && cd ..",
    "prebuild": "npm run copy:types",
    "predev": ". ./set-env.zsh && dfx canister create dao && dfx build dao && npm run copy:types && dfx deploy --argument '(opt record { btcflower = '$BTCFLOWER_LOCAL_CANISTER_ID'; ethflower = '$ETHFLOWER_LOCAL_CANISTER_ID'}, vec {principal \"zvkal-dnnsd-syh57-zvwzw-3aa6g-nt4vz-2ncib-dqfd4-oaisq-xhv6y-eae\"})' --mode=reinstall dao",
    "copy:types": "rsync -avr .dfx/$(echo ${DFX_NETWORK:-'**'})/canisters/** --exclude='assets/' --exclude='idl/' --exclude='*.wasm' --delete src/declarations",
    "format": "prettier --write 'src/frontend/**/*.{ts,svelte,js,json,css}'"
  },
  "dependencies": {
    "@dfinity/agent": "0.10.0",
    "@dfinity/auth-client": "0.10.0",
    "@dfinity/authentication": "0.10.0",
    "@dfinity/candid": "0.10.0",
    "@dfinity/identity": "0.10.0",
    "@dfinity/principal": "^0.10.0",
    "@tailwindcss/typography": "^0.5.2",
    "crc-32": "^1.2.1",
    "ic-stoic-identity": "^2.0.0",
    "js-sha256": "^0.9.0",
    "node-fetch": "^3.2.0",
    "svelte-confetti-explosion": "^0.2.0",
    "svelte-forms-lib": "^2.0.1",
    "svelte-markdown": "^0.2.2",
    "svelte-spa-router": "^3.2.0",
    "yup": "^0.32.11"
  },
  "devDependencies": {
    "@sveltejs/vite-plugin-svelte": "next",
    "@tsconfig/svelte": "^3.0.0",
    "@types/node": "^16.11.25",
    "autoprefixer": "^10.4.2",
    "buffer": "^6.0.3",
    "cssnano": "^5.0.17",
    "postcss": "^8.4.6",
    "postcss-load-config": "^3.1.1",
    "seamless-scroll-polyfill": "^2.1.8",
    "svelte": "^3.42.5",
    "svelte-check": "^2.4.3",
    "svelte-preprocess": "^4.9.4",
    "tailwindcss": "^3.0.18",
    "tslib": "^2.3.1",
    "typescript": "^4.4.3",
    "vite": "^2.5.7"
  }
}
