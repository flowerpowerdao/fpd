// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Proposal =
  {
    description : Text;
    expiryDate : Int;
    flowersVoted : List<Nat32>;
    id : Nat;
    options : [Text];
    proposer : Principal;
    state : ProposalState;
    timestamp : Int;
    title : Text;
    votes : Trie<Principal, (Nat, Nat)>
  };
type ProposalState = {#adopted; #open; #rejected};
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var nextProposalId : Nat;
  stable var proposals :
    {#branch : Branch<Nat, Proposal>; #empty; #leaf : Leaf<Nat, Proposal>};
  stable var votingHistories :
    {
      #branch : Branch<Principal, List<Nat>>;
      #empty;
      #leaf : Leaf<Principal, List<Nat>>
    }
};
