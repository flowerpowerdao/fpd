type VoteArgs = 
 record {
   option: nat;
   proposalId: nat;
 };
type Trie = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: ProposalState;
 };
type ProposalState = 
 variant {
   closed;
   open;
 };
type Proposal = 
 record {
   description: text;
   id: nat;
   options: vec Option;
   proposer: principal;
   state: ProposalState;
   timestamp: int;
   totalVotes: nat;
   voters: List_1;
 };
type Option = 
 record {
   "text": text;
   voters: Trie;
   votes: nat;
 };
type List_1 = 
 opt record {
       principal;
       List_1;
     };
type List = 
 opt record {
       record {
         Key;
         nat;
       };
       List;
     };
type Leaf = 
 record {
   keyvals: AssocList;
   size: nat;
 };
type Key = 
 record {
   hash: Hash;
   key: principal;
 };
type Hash = nat32;
type Branch = 
 record {
   left: Trie;
   right: Trie;
   size: nat;
 };
type AssocList = 
 opt record {
       record {
         Key;
         nat;
       };
       List;
     };
service : {
  get_proposal: (nat) -> (opt Proposal) query;
  list_proposals: () -> (vec Proposal) query;
  submit_proposal: (text, vec text) -> (Result_1);
  vote: (VoteArgs) -> (Result);
  whoami: () -> (text) query;
}
