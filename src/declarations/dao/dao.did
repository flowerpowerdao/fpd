type VoteArgs = 
 record {
   option: nat;
   proposalId: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type ProposalView = 
 record {
   description: text;
   expiryDate: int;
   flowersVoted: vec nat32;
   id: nat;
   options: vec text;
   proposer: principal;
   state: ProposalState;
   timestamp: int;
   title: text;
   votes: vec record {
                principal;
                record {
                  option: nat;
                  votesCast: nat;
                };
              };
 };
type ProposalState = 
 variant {
   adopted;
   open;
   rejected;
 };
type DAO = 
 service {
   getProposal: (nat) -> (opt ProposalView) query;
   getVotingHistory: () -> (vec nat) query;
   listProposals: () -> (vec ProposalView) query;
   submitProposal: (text, text, vec text) -> (Result_1);
   vote: (VoteArgs) -> (Result);
 };
service : (bool, opt text) -> DAO
