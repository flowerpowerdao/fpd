// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type DayCanisterCyclesData = [var Nat64];
type DayCanisterHeapMemorySizeData = [var Nat64];
type DayCanisterMemorySizeData = [var Nat64];
type DayData =
  {
    canisterCyclesData : DayCanisterCyclesData;
    canisterHeapMemorySizeData : DayCanisterHeapMemorySizeData;
    canisterMemorySizeData : DayCanisterMemorySizeData;
    updateCallsData : DayUpdateCallsCountData
  };
type DayDataId = Nat32;
type DayUpdateCallsCountData = [var Nat64];
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Proposal =
  {
    core : Bool;
    description : Text;
    expiryDate : Int;
    flowersVoted : {btcFlowers : List<Nat32>; ethFlowers : List<Nat32>};
    id : Nat;
    options : [Text];
    proposer : Principal;
    state : ProposalState;
    title : Text;
    votes : Trie<Principal, (Nat, Nat, Nat, Nat)>;
    votesCast : Nat
  };
type ProposalDeprecated =
  {
    core : Bool;
    description : Text;
    expiryDate : Int;
    flowersVoted : {btcFlowers : List<Nat32>; ethFlowers : List<Nat32>};
    id : Nat;
    options : [Text];
    proposer : Principal;
    state : ProposalState;
    title : Text;
    votes : Trie<Principal, (Nat, Nat)>;
    votesCast : Nat
  };
type ProposalState = {#adopted; #open; #rejected};
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type UpgradeData = {#v1 : {dayData : [UpgradeDataDayTuple]}};
type UpgradeDataDayTuple = (DayDataId, DayData);
type UpgradeData__2 = UpgradeData;
actor {
  stable var _canistergeekMonitorUD : ?UpgradeData__2;
  stable var nextProposalId : Nat;
  stable var proposalHistories :
    {
      #branch : Branch<Principal, List<Nat>>;
      #empty;
      #leaf : Leaf<Principal, List<Nat>>
    };
  stable var proposals :
    {
      #branch : Branch<Nat, ProposalDeprecated>;
      #empty;
      #leaf : Leaf<Nat, ProposalDeprecated>
    };
  stable var proposalsV2 :
    {#branch : Branch<Nat, Proposal>; #empty; #leaf : Leaf<Nat, Proposal>};
  stable var votingHistories :
    {
      #branch : Branch<Principal, List<{id : Nat; option : Nat}>>;
      #empty;
      #leaf : Leaf<Principal, List<{id : Nat; option : Nat}>>
    }
};
